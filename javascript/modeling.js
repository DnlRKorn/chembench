// Enable or disable parts of the form //
var categoryParamIDs = new Array('selectedCategoryDataset', 'knnCat13', 'knnCat14', 'knnCategoryOptimization1', 'knnCategoryOptimization2', 'knnCategoryOptimization3', 'knnCategoryOptimization4', 'svmTypeCategory0', 'svmTypeCategory1');
var continuousParamIDs = new Array('selectedContinuousDataset', 'knnCon13', 'knnCon14', 'knnCon15', 'knnCon16', 'knnCon17', 'knnCon18', 'svmTypeContinuous0', 'svmTypeContinuous1');

function getSelectedDataset(){
	//get the numCompounds and availableDescriptors for the currently selected dataset
	if(document.getElementById("categoryDataset").checked==true){
		datasetId = document.getElementById("selectedCategoryDataset").value;
		<s:iterator value="userCategoryDatasets">
		if(datasetId==<s:property value="fileId" />){
			selectedDatasetNumCompounds = <s:property value='numCompound' />;
			selectedDatasetAvailableDescriptors = "<s:property value='availableDescriptors' />";
		}
		</s:iterator>
	}
	else{
		datasetId = document.getElementById("selectedContinuousDataset").value;
		<s:iterator value="userContinuousDatasets">
			if(datasetId==<s:property value="fileId" />){
				selectedDatasetNumCompounds = <s:property value='numCompound' />;
				selectedDatasetAvailableDescriptors = "<s:property value='availableDescriptors' />";
			}
		</s:iterator>
	}
	
	//enable / disable based on the availableDescriptors
	if(selectedDatasetAvailableDescriptors.indexOf("MOLCONNZ") > -1){
		document.getElementById("descriptorGenerationType" + "MOLCONNZ").disabled = false;
	}
	else{
		document.getElementById("descriptorGenerationType" + "MOLCONNZ").disabled = true;
	}
	
	if(selectedDatasetAvailableDescriptors.indexOf("DRAGONH") > -1){
		document.getElementById("descriptorGenerationType" + "DRAGONH").disabled = false;
	}
	else{
		document.getElementById("descriptorGenerationType" + "DRAGONH").disabled = true;
	}
	
	if(selectedDatasetAvailableDescriptors.indexOf("DRAGONNOH") > -1){
		document.getElementById("descriptorGenerationType" + "DRAGONNOH").disabled = false;
	}
	else{
		document.getElementById("descriptorGenerationType" + "DRAGONNOH").disabled = true;
	}
	
	if(selectedDatasetAvailableDescriptors.indexOf("MACCS") > -1){
		document.getElementById("descriptorGenerationType" + "MACCS").disabled = false;
	}
	else{
		document.getElementById("descriptorGenerationType" + "MACCS").disabled = true;
	}
	
	if(selectedDatasetAvailableDescriptors.indexOf("MOE2D") > -1){
		document.getElementById("descriptorGenerationType" + "MOE2D").disabled = false;
	}
	else{
		document.getElementById("descriptorGenerationType" + "MOE2D").disabled = true;
	}
	
	if(selectedDatasetAvailableDescriptors.indexOf("UPLOADED") > -1){
		document.getElementById("descriptorGenerationType" + "UPLOADED").disabled = false;
	}
	else{
		document.getElementById("descriptorGenerationType" + "UPLOADED").disabled = true;
	}
	
	//recalculate time estimate for the newly selected dataset
	calculateRuntimeEstimate();
}

function calculateRuntimeEstimate(){
	//estimates runtime based on input parameters and displays it.
	//assumes that getDataset has assigned the value of selectedDatasetNumCompounds already.
	
	var timeEstimateDays = 0;
	var timeEstimateHours = 0;
	var timeEstimateMins = 0;
	
	var dataSplitMethod = document.getElementById("trainTestSplitType").value;
	var modelMethod = document.getElementById("modelingType").value;
	
	var numSplits;
	if(dataSplitMethod=="RANDOM"){
		numSplits = document.getElementById("numSplitsInternalRandom").value;
	}
	else{
		//sphere exclusion
		numSplits = document.getElementById("numSplitsInternalSphere").value;
	}
	
	//Time estimates were generated by taking the results from around 200 jobs
	//then removing outliers and plotting a trendline in Excel. Predictions 
	//look pretty accurate in there at least.
	if(modelMethod=="RANDOMFOREST"){
		timeEstimateMins = (selectedDatasetNumCompounds*numSplits*0.003)-5.718;
	}
	else if(modelMethod=="KNN-GA"){
		//var maxNumGenerations = document.getElementById("gaMaxNumGenerations").value;
		timeEstimateMins = (selectedDatasetNumCompounds*numSplits*0.05);
	}
	else if(modelMethod=="KNN-SA"){
		//depends on numRuns and needs a factor for convergence parameters (temperature etc).
		var numRuns = document.getElementById("saNumRuns").value;
		var numBest = document.getElementById("saNumBestModels").value;

		var numDifferentDescriptors = 1;

		var minDesc = document.getElementsByName("knnMinNumDescriptors")[1].value;
		var maxDesc = document.getElementsByName("knnMaxNumDescriptors")[1].value;
		var descSteps = document.getElementById("knnDescriptorStepSize").value;

		if(descSteps != 0){
			numDifferentDescriptors = Math.floor((maxDesc - minDesc)/descSteps) + 1;
		}
					
		timeEstimateMins = numSplits *(numRuns*numBest*numDifferentDescriptors)*selectedDatasetNumCompounds*0.01;
	}
	
	
	//When UPS ships you a package, they artificially add one day to their 'estimated
	//arrival time'. When customers receive their package a day early? They say, wow,
	//UPS sure is fast! 
	//So we multiply job time estimates by an arbitrary amount, so that we can always
	//perform better than expectations :)
	var makeUsLookGood = 1.2;
	timeEstimateMins = timeEstimateMins * makeUsLookGood; 
	
	timeEstimateMins = Math.ceil(timeEstimateMins);
	if(timeEstimateMins <= 0){
		timeEstimateMins = 2;
	}
	
	
	var timeEstimateString = timeEstimateMins + " minutes";
	if(timeEstimateMins == 1){
		timeEstimateString = timeEstimateMins + " minute";
	}
	
	if(timeEstimateMins > 120){
		timeEstimateHours = Math.ceil(timeEstimateMins / 60);
		timeEstimateString = timeEstimateHours + " hours";
		if(timeEstimateHours > 48){
			timeEstimateDays =  Math.ceil(timeEstimateHours / 24);
			timeEstimateString = timeEstimateDays + " days";
		}
	}
	
	document.getElementById("timeEstimateDiv").innerHTML = "<br />This modeling job will take about <b>" + timeEstimateString + "</b> to finish.";
}	


function calculateNumModels(){
	alert("hi");
	alert(document.getElementById("numSplitsInternalRandom").value);
	
}

function setToContinuous(){
	var i;
	for(i = 0; i < categoryParamIDs.length; i++){
		if(document.getElementById(categoryParamIDs[i]) != null){
			document.getElementById(categoryParamIDs[i]).disabled = true;
		}
	}
	for(var i = 0; i < continuousParamIDs.length; i++){
		if(document.getElementById(continuousParamIDs[i]) != null){
			document.getElementById(continuousParamIDs[i]).disabled = false;
		}
	}
	document.getElementById("actFileDataType").value = "CONTINUOUS";
}

function setToCategory(){
	var i;
	for(i = 0; i < categoryParamIDs.length; i++){
		if(document.getElementById(categoryParamIDs[i]) != null){
			document.getElementById(categoryParamIDs[i]).disabled = false;
		}
	}
	for(var i = 0; i < continuousParamIDs.length; i++){
		if(document.getElementById(continuousParamIDs[i]) != null){
			document.getElementById(continuousParamIDs[i]).disabled = true;
		}
	}
	document.getElementById("actFileDataType").value = "CATEGORY";
}

function setCategoryOrContinuous(){
	//check which type of dataset we've got, then set continuous / category options accordingly
	alert("oh hai");
}

function getNewSeed(){
	document.getElementById("externalRandomSeed").value = Math.floor(Math.random()*16000);
}
	
function enableEdit(){
	document.getElementById("Edit").disabled = false;
}

// End Enable-Disable functions //

// Form validation functions //

function validateForm(){
	//check that all the relevant kNN parameters are entered as numbers
	
	//check that the job name is not the same as any of the user's existing
	//job names, model names, predictor names, or dataset names
	
	//check that there are no spaces in the job name.
	
	var rejectName = false;
	var errorstring;
	var jobname = document.getElementById("jobName").value;
	for(i=0; i < jobname.length; i++){
		if(jobname[i] == ' '){
			rejectName = true;
			errorstring="The job name must not contain a space.";
		}
	}
	if(jobname.length == 0){
		rejectName = true;
		errorstring="Please enter a name for this job.";
	}
	if(rejectName){
		window.alert(errorstring);
		return false; 	
	}
	else{
		return true;
	}
	/*for(n in ls)
		if(value==ls[n]&&value!="") {
                  window.alert("The model name of '"+value+"' is already in use.");
                  document.getElementById("jobName").value="";
   			btn.disabled=true;
			return ; 	
	}
	btn.disabled=false;  
	*/
}

function submitForm(button)
{
	if(validateForm()){
		button.disabled=true;
		button.form.submit();
		document.getElementById('submitMessage').innerHTML="<i>Your workflow is being submitted, please wait.</i>";
		return true;
	}
	else{
		return false;
	}
}

// End Form validation functions //


function showDataset()
{
	//Open dataset in new window
	//make sure that they've picked an existing continuous or category dataset
	if(document.getElementById("continuousDataset").checked){
		window.open("viewDataset?id="+document.getElementById("selectedContinuousDataset").value);
		return true;
	}
	else if(document.getElementById("categoryDataset").checked){
		window.open("viewDataset?id="+document.getElementById("selectedCategoryDataset").value);
		return true;
	}
	else{
		window.alert("Please specify a dataset.");
		return false;
	}
}

